const express = require('express')
const cors = require('cors')
const { GoogleGenerativeAI } = require('@google/generative-ai')
const path = require('path')

// Configurar dotenv solo para desarrollo local
if (process.env.NODE_ENV !== 'production') {
  require('dotenv').config({ path: path.join(__dirname, '..', '.env') })
}

const app = express()
const PORT = process.env.PORT || 3001

// Middleware
app.use(
  cors({
    origin: [
      'http://localhost:5173',
      'http://localhost:5174',
      'http://localhost:5175',
      'http://localhost:3000',
      'https://marlo-byte.github.io',
    ],
    credentials: true,
  }),
)
app.use(express.json())

// Inicializar Gemini AI
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY)

// Prompt personalizado para Mariano L√≥pez
const MARIANO_PERSONA = `
Eres Mariano L√≥pez, un desarrollador web y profesional en higiene y seguridad laboral de Salta, Argentina.

Informaci√≥n sobre ti:
- Nombre: Mariano L√≥pez
- Ubicaci√≥n: Salta Capital, Argentina
- Profesi√≥n: Desarrollador Web Full Stack y T√©cnico en Higiene y Seguridad Laboral
- Experiencia: Desarrollo web con tecnolog√≠as modernas como Vue.js, React, Node.js, Python
- Especialidades: Frontend development, backend development, bases de datos, higiene y seguridad laboral
- Personalidad: Profesional, amigable, entusiasta por la tecnolog√≠a, comprometido con la calidad

Instrucciones:
1. Responde SIEMPRE en primera persona como si fueras Mariano L√≥pez
2. Mant√©n un tono profesional pero cercano y amigable
3. Usa tu conocimiento t√©cnico para responder preguntas sobre desarrollo web
4. Si te preguntan sobre proyectos, menciona que tienes experiencia en desarrollo full stack
5. Si te preguntan sobre tu ubicaci√≥n, menciona que est√°s en Salta Capital, Argentina
6. Si no sabes algo espec√≠fico sobre Mariano, responde de manera general pero mant√©n el personaje
7. Siempre responde en espa√±ol
8. Mant√©n las respuestas concisas pero informativas
9. Si te preguntan sobre contacto, menciona que pueden ver m√°s informaci√≥n en el portfolio
10. Muestra entusiasmo por la tecnolog√≠a y el desarrollo web

Recuerda: Eres Mariano L√≥pez respondiendo directamente a visitantes de tu portfolio web.
`

// Endpoint para chat con IA
app.post('/api/chat', async (req, res) => {
  try {
    const { message } = req.body

    if (!message || message.trim() === '') {
      return res.status(400).json({
        error: 'El mensaje no puede estar vac√≠o',
      })
    }

    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({
        error: 'API key de Gemini no configurada',
      })
    }

    // Obtener el modelo
    const model = genAI.getGenerativeModel({ model: 'gemini-1.5-flash' })

    // Crear el prompt completo
    const fullPrompt = `${MARIANO_PERSONA}\n\nUsuario: ${message}\n\nMariano L√≥pez:`

    // Generar respuesta
    const result = await model.generateContent(fullPrompt)
    const response = await result.response
    const text = response.text()

    // Limpiar la respuesta (remover posibles prefijos)
    const cleanedText = text
      .replace(/^Mariano L√≥pez:\s*/i, '')
      .replace(/^Mariano:\s*/i, '')
      .trim()

    res.json({
      response: cleanedText,
      timestamp: new Date().toISOString(),
    })
  } catch (error) {
    console.error('Error en chat:', error)

    // Respuesta de fallback
    const fallbackResponses = [
      'Disculpa, estoy teniendo problemas t√©cnicos en este momento. ¬øPodr√≠as intentar de nuevo en unos minutos?',
      'Lo siento, hay un problema con mi conexi√≥n. Mientras tanto, puedes explorar mi portfolio para conocer m√°s sobre mi trabajo.',
      'Parece que hay un inconveniente t√©cnico. Te invito a revisar mis proyectos y experiencia en el portfolio.',
    ]

    const randomResponse = fallbackResponses[Math.floor(Math.random() * fallbackResponses.length)]

    res.status(500).json({
      error: 'Error interno del servidor',
      fallbackResponse: randomResponse,
    })
  }
})

// Endpoint de salud
app.get('/api/health', (req, res) => {
  res.json({
    status: 'OK',
    timestamp: new Date().toISOString(),
    service: 'Mariano L√≥pez Portfolio Chat API',
  })
})

// Endpoint de informaci√≥n
app.get('/api/info', (req, res) => {
  res.json({
    name: 'Mariano L√≥pez Portfolio Chat API',
    version: '1.0.0',
    description: 'API para chat con IA personalizada como Mariano L√≥pez',
    endpoints: {
      chat: 'POST /api/chat',
      health: 'GET /api/health',
      info: 'GET /api/info',
    },
  })
})

// Manejo de errores global
app.use((err, req, res, next) => {
  console.error('Error no manejado:', err)
  res.status(500).json({
    error: 'Error interno del servidor',
    message: 'Algo sali√≥ mal. Por favor, int√©ntalo de nuevo.',
  })
})

// Manejo de rutas no encontradas
app.use('*', (req, res) => {
  res.status(404).json({
    error: 'Ruta no encontrada',
    message: 'La ruta solicitada no existe en este servidor.',
  })
})

// Iniciar servidor
app.listen(PORT, () => {
  console.log(`üöÄ Servidor corriendo en puerto ${PORT}`)
  console.log(`üì° API disponible en http://localhost:${PORT}/api`)
  console.log(`üí¨ Chat endpoint: http://localhost:${PORT}/api/chat`)
  console.log(`‚ù§Ô∏è  Health check: http://localhost:${PORT}/api/health`)

  if (!process.env.GEMINI_API_KEY) {
    console.warn('‚ö†Ô∏è  ADVERTENCIA: GEMINI_API_KEY no est√° configurada')
    console.warn('   Configura tu API key en el archivo .env')
  } else {
    console.log('‚úÖ Gemini API key configurada correctamente')
  }
})

module.exports = app
